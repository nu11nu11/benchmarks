% DOS\_PLONE(1) dos\_plone user manual
% 0\_o -- null\_null  
nu11.nu11 [at] yahoo.com  
Oh, and it is n-u-one-one.n-u-one-one, no l's...
% February 25, 2016

# NAME

dos\_plone.py - Plone DoS test tool

# SYNOPSIS

**dos\_plone.py** [-h] -t TARGET [-a ATTACK] [-n NUMBER] [-v]

# DESCRIPTION

This is the Plone DoS test tool - Availability does matter.  
Use it to drown a Plone instance in non-cachable requests.  

This script executes a chosen attack method using multiple threads. Hitting
Ctrl+C will initiate the program shutdown. No more requests will be generated, 
however, pending requests will continue to wait until they get answered or time 
out.  

A captcha needs to be solved in order to start an attack, giving you the 
opportunity to re-check all settings and determine if you really want to 
attack your chosen target.

## WARNING

ATTACK YOUR OWN PLONE INSTALLATIONS ONLY!!!  
WHEN USING THIS TOOL AGAINST OTHER INSTALLATIONS THAN THOSE  
YOU ARE AUTHORIZED TO ATTACK, YOU MIGHT VIOLATE YOUR LOCAL LAWS!

## DISCLAIMER

This software is delivered as-is. Use it on your own risk!  
I am _not_ responsible for any damage it might cause and  
I cannot be held liable for it. **YOU HAVE BEEN WARNED!**

# OPTIONS

**-h, --help**  
Print the nelp screen and exit.

**-v, --version**  
Print the program name and version and exit.

**-t, --target URL**  
Mandatory switch to define a target URL of the form 
*http[s?]://domain-or-ip.com[:port]* without a trailing slash. Request URI paths
will be automatically added as needed.  
(default: https://localhost)

**-a INT, --attack INT**  
State which attack mode you want to execute. You may choose INT from:  
0: make GET requests using randomly generated URIs,  
1: make GET requests on the search form using random search strings,  
2: make POST requests on the contact-info form using partially randomized 
content resulting in many emails being sent to your configured contact address,  
3: make POST requests on the login form using random user and password strings,  
4: same as above, but try to break things by using GET requests instead,  
5: for each thread started, one of the attacks described above is randomly 
chosen.  
(default: 0)

**-n INT, --number INT**  
Create INT threads to execute the chosen attack. New threads will start running
after waiting for a random backoff time. This eases rampup for the web server 
and allows for a smoother transition into a state of saturation.  
When hitting Ctrl+C, all threads will join after their last request has been
answered or it timed out. Pressing Ctrl+C more than twice will result in a 
warning and, ultimately, in instant shutdown without mobbing up.  
(default: 1)

# BUGS

I guess it would be nice if users could assemble a custom list of attacks.

# COPYRIGHT

(C) 2016 until today by 0_o, all rights reserved. **NO UNAUTHORIZED USE PERMITTED!**  

Licensed under GPLv3.0: GNU GPL version 3 <http://www.gnu.org/licenses/gpl-3.0.en.html>  

[//]: # "vim: ts=4 sw=4 et syntax=markdown"
